{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from \"@keystone-6/core\";\nimport * as dotenv from \"dotenv\";\n// to keep this file tidy, we define our schema in a different file\nimport { lists } from \"./schema\";\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from \"./auth\";\n\ndotenv.config();\n\nconst {\n  S3_BUCKET_NAME: bucketName = \"keystone-test\",\n  S3_REGION: region = \"ap-southeast-1\",\n  S3_ACCESS_KEY_ID: accessKeyId = \"keystone\",\n  S3_SECRET_ACCESS_KEY: secretAccessKey = \"keystone\",\n  CLIENT_BASE_URL: clientOrigin = \"http://localhost:3555\",\n  MODE\n} = process.env;\n\nconst IS_DEV = MODE === \"development\" || process.env.NODE_ENV === \"development\";\nconst PORT = process.env.PORT ? parseInt(process.env.PORT, 10) : 3555;\n\nexport default withAuth(\n  config({\n    db: {\n      provider: \"sqlite\",\n      url: \"file:./keystone.db\"\n    },\n    lists,\n    session,\n    server: {\n      port: PORT,\n      cors: IS_DEV\n        ? {\n            origin: \"*\",\n            methods: \"GET,HEAD,PUT,PATCH,POST,DELETE\",\n            preflightContinue: false,\n            optionsSuccessStatus: 204\n          }\n        : {\n            origin: [\"*\", clientOrigin]\n          }\n    },\n    /** config */\n    storage: {\n      my_s3_files: {\n        kind: \"s3\", // this storage uses S3\n        type: \"image\", // only for files\n        bucketName, // from your S3_BUCKET_NAME environment variable\n        region, // from your S3_REGION environment variable\n        accessKeyId, // from your S3_ACCESS_KEY_ID environment variable\n        secretAccessKey, // from your S3_SECRET_ACCESS_KEY environment variable\n        signed: { expiry: 3600 } // (optional) links will be signed with an expiry of 3600 seconds (an hour)\n      }\n      /** more storage */\n    }\n  })\n);\n", "// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\n\nimport { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  image,\n  text,\n  relationship,\n  password,\n  timestamp,\n  checkbox,\n} from \"@keystone-6/core/fields\";\n\n\n// the document field is a more complicated field, so it has it's own package\nimport { document } from \"@keystone-6/fields-document\";\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport type { Lists } from \".keystone/types\";\n\nexport const lists: Lists = {\n  User: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // this is the fields for our User list\n    fields: {\n      // by adding isRequired, we enforce that every User should have a name\n      //   if no name is provided, an error will be displayed\n      name: text({ validation: { isRequired: true } }),\n\n      email: text({\n        validation: { isRequired: true },\n        // by adding isIndexed: 'unique', we're saying that no user can have the same\n        // email as another user - this may or may not be a good idea for your project\n        isIndexed: \"unique\"\n      }),\n\n      password: password({ validation: { isRequired: true } }),\n\n      // we can use this field to see what Posts this User has authored\n      //   more on that in the Post list below\n      posts: relationship({ ref: \"Post.author\", many: true }),\n\n      createdAt: timestamp({\n        // this sets the timestamp to Date.now() when the user is first created\n        defaultValue: { kind: \"now\" }\n      })\n    }\n  }),\n\n  Post: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n    ui: {\n      isHidden: false\n    },\n    // this is the fields for our Post list\n    fields: {\n      title: text({ validation: { isRequired: true } }),\n\n      // the document field can be used for making rich editable content\n      //   you can find out more at https://keystonejs.com/docs/guides/document-fields\n      content: document({\n        formatting: true,\n        layouts: [\n          [1, 1],\n          [1, 1, 1],\n          [2, 1],\n          [1, 2],\n          [1, 2, 1]\n        ],\n        links: true,\n        dividers: true\n      }),\n\n      // with this field, you can set a User as the author for a Post\n      author: relationship({\n        // we could have used 'User', but then the relationship would only be 1-way\n        ref: \"User.posts\",\n\n        // this is some customisations for changing how this will look in the AdminUI\n        ui: {\n          displayMode: \"cards\",\n          cardFields: [\"name\", \"email\"],\n          inlineEdit: { fields: [\"name\", \"email\"] },\n          linkToItem: true,\n          inlineConnect: true\n        },\n\n        // a Post can only have one author\n        //   this is the default, but we show it here for verbosity\n        many: false\n      }),\n\n      // with this field, you can add some Tags to Posts\n      tags: relationship({\n        // we could have used 'Tag', but then the relationship would only be 1-way\n        ref: \"Tag.posts\",\n\n        // a Post can have many Tags, not just one\n        many: true,\n\n        // this is some customisations for changing how this will look in the AdminUI\n        ui: {\n          displayMode: \"cards\",\n          cardFields: [\"name\"],\n          inlineEdit: { fields: [\"name\"] },\n          linkToItem: true,\n          inlineConnect: true,\n          inlineCreate: { fields: [\"name\"] }\n        }\n      })\n    }\n  }),\n\n  // this last list is our Tag list, it only has a name field for now\n  Tag: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // setting this to isHidden for the user interface prevents this list being visible in the Admin UI\n    ui: {\n      isHidden: false\n    },\n\n    // this is the fields for our Tag list\n    fields: {\n      name: text(),\n      // this can be helpful to find out all the Posts associated with a Tag\n      posts: relationship({ ref: \"Post.tags\", many: true })\n    }\n  }),\n\n  Project: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n \n    // this is the fields for our Post list\n    fields: {\n      avatar: image({ storage: \"my_s3_files\" }),\n      name: text({ validation: { isRequired: true } }),\n\n      // the document field can be used for making rich editable content\n      //   you can find out more at https://keystonejs.com/docs/guides/document-fields\n      content: document({\n        formatting: true,\n        layouts: [\n          [1, 1],\n          [1, 1, 1],\n          [2, 1],\n          [1, 2],\n          [1, 2, 1]\n        ],\n        links: true,\n        dividers: true\n      }),\n\n      socialWeb: text(),\n      socialX: text(),\n      socialDiscord: text(),\n      socialTelegram: text(),\n\n      // with this field, you can add some Tags to Posts\n      tags: relationship({\n        // we could have used 'Tag', but then the relationship would only be 1-way\n        ref: \"ProjectTag.tags\",\n\n        // a Post can have many Tags, not just one\n        many: true,\n\n        // this is some customisations for changing how this will look in the AdminUI\n        ui: {\n          displayMode: \"cards\",\n          cardFields: [\"name\"],\n          inlineEdit: { fields: [\"name\"] },\n          linkToItem: true,\n          inlineConnect: true,\n          inlineCreate: { fields: [\"name\"] }\n        }\n      }),\n\n      categories: relationship({\n        ref: \"Category.categories\",\n        many: true,\n \n        ui: {\n          displayMode: \"cards\",\n          cardFields: [\"name\"],\n          inlineEdit: { fields: [\"name\"] },\n          linkToItem: true,\n          inlineConnect: true,\n          inlineCreate: { fields: [\"name\"] }\n        }\n      }),\n\n      isAnnounced: checkbox({\n        defaultValue: false,\n        ui: {\n          itemView: {\n            fieldPosition: \"sidebar\"\n          }\n        }\n      }),\n      isNative: checkbox({\n        defaultValue: false,\n        ui: {\n          itemView: {\n            fieldPosition: \"sidebar\"\n          }\n        }\n      }),\n      isLeadingProject: checkbox({\n        defaultValue: false,\n        ui: {\n          itemView: {\n            fieldPosition: \"sidebar\"\n          }\n        }\n      })\n    }\n  }),\n\n  // this last list is our Tag list, it only has a name field for now\n  ProjectTag: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // setting this to isHidden for the user interface prevents this list being visible in the Admin UI\n    ui: {\n      isHidden: false\n    },\n\n    // this is the fields for our Tag list\n    fields: {\n      name: text(),\n      // this can be helpful to find out all the Projects associated with a Tag\n      tags: relationship({ ref: \"Project.tags\", many: true })\n    }\n  }),\n\n  Category: list({\n    access: allowAll,\n    ui: {\n      isHidden: false\n    },\n\n    fields: {\n      name: text(),\n      categories: relationship({ ref: \"Project.categories\", many: true })\n    }\n  })\n};\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core"]
}
